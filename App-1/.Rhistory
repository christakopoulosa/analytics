library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(8, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
View(dataAsDataFrame)
help(wordcloud)
help(brewer.pal)
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2", exact.n = TRUE)[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2", exact.5 = TRUE)[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2", exact.5 = TRUE)[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal("Dark2", exact.5 = TRUE)[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
library(dplyr)
help("data_frame")
library(tidytext)
install.packages("tidytext")
library(tidytext)
sentiments
help("get_sentiments")
View(dataAsDataFrame)
corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector3))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
sentiments
austen_books()
help(austen_book())
library(dplyr)
help(austen_book())
austen_books()
help("tidytext")
##corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5)) - initial example withoiut the for loop
for (i in 1:5){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud <- wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
dev.off()
}
for (i in 1:5){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud <- wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
dev.off ()
}
View(dataAsDataFrame)
##corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5)) - initial example withoiut the for loop
for (i in 6:10){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud <- wordcloud(words = corpus,
max.words = 100,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
dev.off ()
}
##corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5)) - initial example withoiut the for loop
for (i in 6:10){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud <- wordcloud(words = corpus,
max.words = 50,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
dev.off ()
}
##corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5)) - initial example withoiut the for loop
for (i in 6:10){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud <- wordcloud(words = corpus,
max.words = 50,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
plot(wordcloud)
dev.off ()
}
##corpus <- Corpus(VectorSource(dataAsDataFrame$characterVector5)) - initial example withoiut the for loop
for (i in 6:10){
corpus <- Corpus(VectorSource(dataAsDataFrame[,c(i)]))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]$content
##Add snowball library
library(SnowballC)
corpus <- Corpus(VectorSource(corpus))
##Create wordcloud
library(wordcloud)
wordcloud(words = corpus,
max.words = 50,
ordered.colors = FALSE,
colors = brewer.pal(5, "Dark2")[factor(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)])
dev.off ()
}
library(ggplot)
library(ggplot2)
help("ggplot2")
autoauto
autoplot(dataAsDataFrame$Q1..Overall..how.did.you.feel.about.the.service.you.received.today.)
autoplot(dataAsDataFrame$characterVector2)
geom_bar(data = dataAsDataFrame$characterVector)
geom_bar(data = X417016$`Q1. Overall, how did you feel about the service you received today?`)
geom_bar(data = as.numeric(X417016$`Q1. Overall, how did you feel about the service you received today?`))
plot(dataAsDataFrame$characterVector2
)
plot(dataAsDataFrame$characterVector2
)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('shiny app')
runApp('shiny app')
library(googleAnalyticsR)
## authenticate, or use the RStudio Addin "Google API Auth" with analytics scopes set
ga_auth()
account_list <- google_analytics_account_list()
View(account_list)
## account_list will have a column called "viewId"
account_list$viewId
## View account_list and pick the viewId you want to extract data from
ga_id <- account_list$viewId[[6]]
## simple query to derive number of sessions, number of users and pages viewed per session - change it to weekly?
monthlydataSessions <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "sessions", dimensions = "yearMonth")
monthlydataUsers <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "users", dimensions = "yearMonth")
monthlydataPagesViewsPerSession <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "pageviewsPerSession", dimensions = "yearMonth")
speed <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "avgPageLoadTime", dimensions = "yearWeek") ##average page load time for every week and then bind the data to one file with - what kind of week is that
speedByBrowser <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "avgPageLoadTime", dimensions = c("yearWeek", "browser"), dim_filters = c("Edge", "Internet Explorer", "Opera", "Chrome", "Firefox", "Safari", "Samsung Internet"))
##add browser filters
df1 <- filter("browser" == "Edge")
df2 <- filter("browser" == "Internet Explorer")
df1 <- filter("browser" == "Opera")
df1 <- filter("browser" == "Chrome")
df1 <- filter("browser" == "Firefox")
df1 <- filter("browser" == "Safari")
df1 <- filter("browser" == "Samsung Internet")
df1 <- filter("browser", "Equals", "Edge")
df1 <- filter("browser", "EQUALS", "Edge")
df1 <- filter("browser", "EXACT", "Edge", caseSensitive = FALSE)
df1 <- filter("browser", "EXACT", "Edge")
df1 <- dim_filter("browser", "EXACT", "Edge")
df1 <- dim_filter("browser", "EXACT", "Edge")
df2 <- dim_filter("browser", "EXACT", "Internet Explorer")
df3 <- dim_filter("browser", "EXACT","Opera")
df4 <- dim_filter("browser", "EXACT","Chrome")
df5 <- dim_filter("browser", "EXACT","Firefox")
df6 <- dim_filter("browser", "EXACT","Safari")
df7 <- dim_filter("browser", "EXACT","Samsung Internet")
speedByBrowser <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "avgPageLoadTime", dimensions = c("yearWeek", "browser"), dim_filters = list(df1, df2, df3, df4, df5, df6)) ##dimension filtering is wrong
df1 <- dim_filter("browser", "EXACT", c("Edge", "Internet Explorer"))
speedByBrowser <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "avgPageLoadTime", dimensions = c("yearWeek", "browser"), dim_filters = list(df1)) ##dimension filtering is wrong
speedByBrowser <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "avgPageLoadTime", dimensions = c("yearWeek", "browser"), dim_filters = df1) ##dimension filtering is wrong
clear()
clear
setwd("~/Desktop")
library(shiny)
runExample("01_hello")
setwd("~/Desktop/App-1")
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp("App-1")
runApp("App-1")
runApp()
setwd("~/Desktop")
runApp()
setwd("~/Desktop/App-1")
runApp()
runApp("App-1")
runApp("App-1")
runApp()
runApp()
runApp()
runApp()
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
runApp()
runApp()
runApp()
runApp("App-1", display.mode = "showcase")
runApp()
runApp("app.R", display.mode = "showcase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("flexdashboard")
runApp()
library(flexdashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##Add survey data
library(data.table)
mydata = fread("427915.csv", col.names = c("userID", "userNo", "name", "email", "ip","uniqueID", "started", "ended",
"satisfactionLevel", "improvements", "task", "taskLevelOfDifficulty"
, "taskLevelOfDifficultyReason"));mydata
View(mydata)
mydata <- mydata[-c(1,2), ]
library(shiny)
library(googleAnalyticsR)
library(flexdashboard)
library(xts)
library(dplyr)
mydata <- data_frame(mydata)
help(data_frame)
class(mydata)
mydata <- data_frame(userID = userID, userNo= userNo, ended =ended, satisfactionLevel = satisfactionLevel, improvements = improvements, task = task,
taskLevelOfDifficulty = taskLevelOfDifficulty, taskLevelOfDifficultyReason)
mydata <- data_frame(userID = mydata$userID, userNo= mydata$userNo, ended =mydata$ended, satisfactionLevel = mydata$satisfactionLevel, improvements = mydata$improvements, task = mydata$task,
taskLevelOfDifficulty = mydata$taskLevelOfDifficulty, mydata$taskLevelOfDifficultyReason)
View(mydata)
runApp()
mydata %>%
group_by(mydata$satisfactionLevel) %>%
summarise(n=n_distinct(mydata$satisfactionLevel)) %>%
ggplot(., aes(x=mydata$satisfactionLevel, y=n)) +
geom_bar(stat='identity')
library(ggplot2)
mydata %>%
group_by(mydata$satisfactionLevel) %>%
summarise(n=n_distinct(mydata$satisfactionLevel)) %>%
ggplot(., aes(x=mydata$satisfactionLevel, y=n)) +
geom_bar(stat='identity')
summarise(n=n_distinct(mydata$satisfactionLevel))
# Basic barplot
p<-ggplot(data=mydata$satisfactionLevel, aes(x=mydata$satisfactionLevel, y = n_distinct(mydata$satisfactionLevel)) +
geom_bar(stat="identity")
# Basic barplot
p<-ggplot(data=mydata$satisfactionLevel, aes(x=mydata$satisfactionLevel, y = n_distinct(mydata$satisfactionLevel)) +
geom_bar(stat="identity")
monthlydataSessions <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "sessions", dimensions = "yearMonth")
library(googleAnalyticsR)
## simple query to derive number of sessions, number of users and pages viewed per session - change it to weekly?
monthlydataSessions <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "sessions", dimensions = "yearMonth")
runApp()
monthlydataSessions <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "sessions", dimensions = "yearMonth")
account_list$viewId
account_list <- google_analytics_account_list()
ga_id <- account_list$viewId[[6]]
monthlydataSessions <- google_analytics_4(ga_id,
date_range = c("2017-01-01", "2017-10-31"),
metrics = "sessions", dimensions = "yearMonth")
View(monthlydataSessions)
View(monthlydataSessions)
ggplot(data = monthlydataSessions, aes(x=yearMonth, y=sessions, group=1)) +geom_line()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ga_account_list()
runApp()
runApp()
runApp()
output$google_analytics <- renderPlot({
ggplot(data = monthlydataSessions, aes(x=yearMonth, y=sessions, group=1)) + geom_bar()
})
output$google_analytics <- renderPlot({
ggplot(data = monthlydataSessions, aes(x=yearMonth, y=sessions, group=1)) + geom_bar()
})
runApp()
runApp()
library(data.table)
mydata = fread("427915.csv", col.names = c("userID", "userNo", "name", "email", "ip","uniqueID", "started", "ended",
"satisfactionLevel", "improvements", "task", "taskLevelOfDifficulty"
, "taskLevelOfDifficultyReason"));mydata
mydata <- mydata[-c(1,2), ] ##delete first two rows
mydata <- data_frame(userID = mydata$userID, userNo= mydata$userNo, ended =mydata$ended, satisfactionLevel = mydata$satisfactionLevel, improvements = mydata$improvements, task = mydata$task,
taskLevelOfDifficulty = mydata$taskLevelOfDifficulty, mydata$taskLevelOfDifficultyReason) ##make data set to a data_frame for easy plotting with ggplot2
View(mydata)
runApp()
View(mydata)
runApp()
runApp()
runApp()
library(shiny)
library(shiny)
library(googleAnalyticsR)
library(flexdashboard)
library(xts)
library(dplyr)
library(ggplot2)
runApp()
runApp()
runApp()
